/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace <%= namespace %>
{

	public class <%= tableClassName %> : IMudTable
	{

		public class <%= tableClassName %>Update : RecordUpdate {
			<% for (const field of fields) { -%>
				public <%= field.type %>? <%= field.key %>;
				public <%= field.type %>? Previous<%= field.key %>;
			<% } -%>
		}

		public readonly static string ID = "<%= tableName %>";
		public static RxTable Table {get{return NetworkManager.Instance.ds.store[ID]; } }
		public override string GetTableId() {return ID;}

		<% for (const field of fields) { -%>
			public <%= field.type %>? <%= field.key %>;
		<% } -%>

		public override Type TableType() {return typeof(<%= tableClassName %>);}
		public override Type TableUpdateType() {return typeof(<%= tableClassName %>Update);}
		
		public override bool Equals (object? obj) {
			<%= tableClassName %> other = (<%= tableClassName %>)obj;

			if(other == null) {return false;}
			<% for (const field of fields) { -%>
				if(<%= field.key %> != other.<%= field.key %>) {return false;}
			<% } -%>
			return true;
		}
		public override void SetValues(params object[] functionParameters){

			<% var i = 0 -%>
			<% for (const field of fields) { -%>
				<% if (field.type === "long" || field.type === "ulong") { -%> 
				<%= field.key %> = (<%= field.type %>)(int)functionParameters[<%= i -%>];
				<% } else { -%> 
				<%= field.key %> = (<%= field.type %>)functionParameters[<%= i -%>];
				<% } -%> 
				<% i++ -%>
			<% } -%>
		}

		public static IObservable<RecordUpdate> GetUpdates<T>() where T : IMudTable, new() {

			IMudTable mudTable = (IMudTable)Activator.CreateInstance(typeof(T));

			return NetworkManager.Instance.sync.onUpdate
			.Where(update => update.Table.Name == ID)
			.Select(
				recordUpdate => {
					return mudTable.RecordUpdateToTyped(recordUpdate);
				});
		}


		public override void PropertyToTable(Property property) {

			<% for (const field of fields) { -%>
				<%= field.key %> = (<%= field.type %>)property["<%= field.key %>"];
			<% } -%>

		}

		public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate) {

			var currentValue = recordUpdate.CurrentValue as Property;
			var previousValue = recordUpdate.PreviousValue as Property;
			
			return new <%= tableClassName %>Update
			{
				Table = recordUpdate.Table,
				CurrentValue = recordUpdate.CurrentValue,
				PreviousValue = recordUpdate.PreviousValue,				
				CurrentRecordKey = recordUpdate.CurrentRecordKey,
				PreviousRecordKey = recordUpdate.PreviousRecordKey,
				Type = recordUpdate.Type,
				
				<% for (const field of fields) { -%>
					<% if (field.type.startsWith("uint") || field.type.startsWith("Uint")) { -%>
						<%= field.key %> = (<%= field.type %>)(<%= field.type.charAt(0).toUpperCase() === field.type.charAt(0) ? field.type.slice(1).toUpperCase() : field.type.slice(1) %>)(currentValue?["<%= field.key.toLowerCase() %>"] ?? null),
					<% } else { -%>
						<%= field.key %> = (<%= field.type %>)(currentValue?["<%= field.key.toLowerCase() %>"] ?? null),
					<% } -%>
				<% } -%>
				<% for (const field of fields) { -%>
					<% if (field.type.startsWith("uint") || field.type.startsWith("Uint")) { -%>
						Previous<%= field.key %> = (<%= field.type %>)(<%= field.type.charAt(0).toUpperCase() === field.type.charAt(0) ? field.type.slice(1).toUpperCase() : field.type.slice(1) %>)(previousValue?["<%= field.key.toLowerCase() %>"] ?? null),
					<% } else { -%>
						Previous<%= field.key %> = (<%= field.type %>)(previousValue?["<%= field.key.toLowerCase() %>"] ?? null),
					<% } -%>
				<% } -%>
			};
		}


	}
}
