/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using mud.Network.schemas;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;
using System.Collections.Generic;
using UnityEngine;

namespace DefaultNamespace
{
    public class EntitiesTableUpdate : TypedRecordUpdate<Tuple<EntitiesTable?, EntitiesTable?>> { }

    public class EntitiesTable : IMudTable
    {
        public readonly static TableId ID = new("", "Entities");

        public override TableId GetTableId()
        {
            return ID;
        }

        public string[]? width;
        public string[]? height;

        public override Type TableType()
        {
            return typeof(EntitiesTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(EntitiesTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            EntitiesTable other = (EntitiesTable)obj;

            if (other == null)
            {
                return false;
            }
            if (width != other.width)
            {
                return false;
            }
            if (height != other.height)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            width = (string[])functionParameters[0];

            height = (string[])functionParameters[1];
        }

        public override void RecordToTable(Record record)
        {
            var table = record.value;
            //bool hasValues = false;

            var widthValue = (string[])table["width"];
            width = widthValue;
            var heightValue = (string[])table["height"];
            height = heightValue;
        }

        public override IMudTable RecordUpdateToTable(RecordUpdate tableUpdate)
        {
            EntitiesTableUpdate update = (EntitiesTableUpdate)tableUpdate;
            return update?.TypedValue.Item1;
        }

        public override RecordUpdate CreateTypedRecord(RecordUpdate newUpdate)
        {
            return new EntitiesTableUpdate
            {
                TableId = newUpdate.TableId,
                Key = newUpdate.Key,
                Value = newUpdate.Value,
                TypedValue = MapUpdates(newUpdate.Value)
            };
        }

        public static Tuple<EntitiesTable?, EntitiesTable?> MapUpdates(
            Tuple<Property?, Property?> value
        )
        {
            EntitiesTable? current = null;
            EntitiesTable? previous = null;

            if (value.Item1 != null)
            {
                try
                {
                    current = new EntitiesTable
                    {
                        width = value.Item1.TryGetValue("width", out var widthVal)
                            ? (string[])widthVal
                            : default,
                        height = value.Item1.TryGetValue("height", out var heightVal)
                            ? (string[])heightVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    current = new EntitiesTable { width = null, height = null, };
                }
            }

            if (value.Item2 != null)
            {
                try
                {
                    previous = new EntitiesTable
                    {
                        width = value.Item2.TryGetValue("width", out var widthVal)
                            ? (string[])widthVal
                            : default,
                        height = value.Item2.TryGetValue("height", out var heightVal)
                            ? (string[])heightVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    previous = new EntitiesTable { width = null, height = null, };
                }
            }

            return new Tuple<EntitiesTable?, EntitiesTable?>(current, previous);
        }
    }
}
