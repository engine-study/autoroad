/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud.Client;
using mud.Network.schemas;
using mud.Unity;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;
using System.Collections.Generic;
using UnityEngine;

namespace DefaultNamespace
{
    public class StatsTableUpdate : TypedRecordUpdate<Tuple<StatsTable?, StatsTable?>> { }

    public class StatsTable : IMudTable
    {
        public readonly static TableId ID = new("", "Stats");

        public override TableId GetTableId()
        {
            return ID;
        }

        public long? mined;
        public long? moved;
        public long? pushed;
        public long? shoveled;

        public override Type TableType()
        {
            return typeof(StatsTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(StatsTableUpdate);
        }

        public override void SetValues(params object[] functionParameters)
        {
            mined = (long)(int)functionParameters[0];

            moved = (long)(int)functionParameters[1];

            pushed = (long)(int)functionParameters[2];

            shoveled = (long)(int)functionParameters[3];
        }

        public override bool SetValues(IEnumerable<Property> result)
        {
            var hasValues = false;
            foreach (var record in result)
            {
                var attribute = record["attribute"].ToString();
                var value = record["value"];

                switch (attribute)
                {
                    case "mined":
                        var minedValue = (long)value;
                        mined = minedValue;
                        hasValues = true;
                        break;
                    case "moved":
                        var movedValue = (long)value;
                        moved = movedValue;
                        hasValues = true;
                        break;
                    case "pushed":
                        var pushedValue = (long)value;
                        pushed = pushedValue;
                        hasValues = true;
                        break;
                    case "shoveled":
                        var shoveledValue = (long)value;
                        shoveled = shoveledValue;
                        hasValues = true;
                        break;
                }
            }

            return hasValues;
        }

        public override IMudTable GetTableValue(string key)
        {
            var query = new Query()
                .Find("?value", "?attribute")
                .Where(TableId.ToString(), key, "?attribute", "?value");
            var result = NetworkManager.Instance.ds.Query(query);
            var statsTable = new StatsTable();
            var hasValues = false;

            foreach (var record in result)
            {
                var attribute = record["attribute"].ToString();
                var value = record["value"];

                switch (attribute)
                {
                    case "mined":
                        var minedValue = (long)value;
                        statsTable.mined = minedValue;
                        hasValues = true;
                        break;
                    case "moved":
                        var movedValue = (long)value;
                        statsTable.moved = movedValue;
                        hasValues = true;
                        break;
                    case "pushed":
                        var pushedValue = (long)value;
                        statsTable.pushed = pushedValue;
                        hasValues = true;
                        break;
                    case "shoveled":
                        var shoveledValue = (long)value;
                        statsTable.shoveled = shoveledValue;
                        hasValues = true;
                        break;
                }
            }

            return hasValues ? statsTable : null;
        }

        public override IMudTable RecordUpdateToTable(RecordUpdate tableUpdate)
        {
            StatsTableUpdate update = (StatsTableUpdate)tableUpdate;

            var currentValue = update?.TypedValue.Item1;
            if (currentValue == null)
            {
                Debug.LogError("No value on StatsTable update");
            }

            return currentValue;
        }

        public override RecordUpdate CreateTypedRecord(RecordUpdate newUpdate)
        {
            return new StatsTableUpdate
            {
                TableId = newUpdate.TableId,
                Key = newUpdate.Key,
                Value = newUpdate.Value,
                TypedValue = MapUpdates(newUpdate.Value)
            };
        }

        public static Tuple<StatsTable?, StatsTable?> MapUpdates(Tuple<Property?, Property?> value)
        {
            StatsTable? current = null;
            StatsTable? previous = null;

            if (value.Item1 != null)
            {
                try
                {
                    current = new StatsTable
                    {
                        mined = value.Item1.TryGetValue("mined", out var minedVal)
                            ? (long)minedVal
                            : default,
                        moved = value.Item1.TryGetValue("moved", out var movedVal)
                            ? (long)movedVal
                            : default,
                        pushed = value.Item1.TryGetValue("pushed", out var pushedVal)
                            ? (long)pushedVal
                            : default,
                        shoveled = value.Item1.TryGetValue("shoveled", out var shoveledVal)
                            ? (long)shoveledVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    current = new StatsTable
                    {
                        mined = null,
                        moved = null,
                        pushed = null,
                        shoveled = null,
                    };
                }
            }

            if (value.Item2 != null)
            {
                try
                {
                    previous = new StatsTable
                    {
                        mined = value.Item2.TryGetValue("mined", out var minedVal)
                            ? (long)minedVal
                            : default,
                        moved = value.Item2.TryGetValue("moved", out var movedVal)
                            ? (long)movedVal
                            : default,
                        pushed = value.Item2.TryGetValue("pushed", out var pushedVal)
                            ? (long)pushedVal
                            : default,
                        shoveled = value.Item2.TryGetValue("shoveled", out var shoveledVal)
                            ? (long)shoveledVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    previous = new StatsTable
                    {
                        mined = null,
                        moved = null,
                        pushed = null,
                        shoveled = null,
                    };
                }
            }

            return new Tuple<StatsTable?, StatsTable?>(current, previous);
        }
    }
}
