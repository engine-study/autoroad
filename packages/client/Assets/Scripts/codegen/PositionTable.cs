/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud.Client;
using mud.Network.schemas;
using mud.Unity;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;
using System.Collections.Generic;
using UnityEngine;

namespace DefaultNamespace
{
    public class PositionTableUpdate : TypedRecordUpdate<Tuple<PositionTable?, PositionTable?>> { }

    public class PositionTable : IMudTable
    {
        public readonly static TableId ID = new("", "Position");

        public override TableId GetTableId()
        {
            return ID;
        }

        public long? x;
        public long? y;

        public override Type TableType()
        {
            return typeof(PositionTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(PositionTableUpdate);
        }

        public override void SetValues(params object[] functionParameters)
        {
            x = (long)(int)functionParameters[0];

            y = (long)(int)functionParameters[1];
        }

        public override bool SetValues(IEnumerable<Property> result)
        {
            var hasValues = false;
            foreach (var record in result)
            {
                var attribute = record["attribute"].ToString();
                var value = record["value"];

                switch (attribute)
                {
                    case "x":
                        var xValue = (long)value;
                        x = xValue;
                        hasValues = true;
                        break;
                    case "y":
                        var yValue = (long)value;
                        y = yValue;
                        hasValues = true;
                        break;
                }
            }

            return hasValues;
        }

        public override IMudTable GetTableValue(string key)
        {
            var query = new Query()
                .Find("?value", "?attribute")
                .Where(TableId.ToString(), key, "?attribute", "?value");
            var result = NetworkManager.Instance.ds.Query(query);
            var positionTable = new PositionTable();
            var hasValues = false;

            foreach (var record in result)
            {
                var attribute = record["attribute"].ToString();
                var value = record["value"];

                switch (attribute)
                {
                    case "x":
                        var xValue = (long)value;
                        positionTable.x = xValue;
                        hasValues = true;
                        break;
                    case "y":
                        var yValue = (long)value;
                        positionTable.y = yValue;
                        hasValues = true;
                        break;
                }
            }

            return hasValues ? positionTable : null;
        }

        public override IMudTable RecordUpdateToTable(RecordUpdate tableUpdate)
        {
            PositionTableUpdate update = (PositionTableUpdate)tableUpdate;

            var currentValue = update?.TypedValue.Item1;
            if (currentValue == null)
            {
                Debug.LogError("No value on PositionTable update");
            }

            return currentValue;
        }

        public override RecordUpdate CreateTypedRecord(RecordUpdate newUpdate)
        {
            return new PositionTableUpdate
            {
                TableId = newUpdate.TableId,
                Key = newUpdate.Key,
                Value = newUpdate.Value,
                TypedValue = MapUpdates(newUpdate.Value)
            };
        }

        public static Tuple<PositionTable?, PositionTable?> MapUpdates(
            Tuple<Property?, Property?> value
        )
        {
            PositionTable? current = null;
            PositionTable? previous = null;

            if (value.Item1 != null)
            {
                try
                {
                    current = new PositionTable
                    {
                        x = value.Item1.TryGetValue("x", out var xVal) ? (long)xVal : default,
                        y = value.Item1.TryGetValue("y", out var yVal) ? (long)yVal : default,
                    };
                }
                catch (InvalidCastException)
                {
                    current = new PositionTable { x = null, y = null, };
                }
            }

            if (value.Item2 != null)
            {
                try
                {
                    previous = new PositionTable
                    {
                        x = value.Item2.TryGetValue("x", out var xVal) ? (long)xVal : default,
                        y = value.Item2.TryGetValue("y", out var yVal) ? (long)yVal : default,
                    };
                }
                catch (InvalidCastException)
                {
                    previous = new PositionTable { x = null, y = null, };
                }
            }

            return new Tuple<PositionTable?, PositionTable?>(current, previous);
        }
    }
}
