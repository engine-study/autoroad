/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud.Client;
using mud.Network.schemas;
using mud.Unity;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;
using System.Collections.Generic;
using UnityEngine;

namespace DefaultNamespace
{
    public class PositionTableUpdate : TypedRecordUpdate<Tuple<PositionTable?, PositionTable?>> { }

    public class PositionTable : IMudTable
    {
        public readonly static TableId ID = new("", "Position");

        public override TableId GetTableId()
        {
            return ID;
        }

        public long? x;
        public long? y;
        public long? layer;

        public override Type TableType()
        {
            return typeof(PositionTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(PositionTableUpdate);
        }

        public override void SetValues(params object[] functionParameters)
        {
            x = (long)(int)functionParameters[0];

            y = (long)(int)functionParameters[1];

            layer = (long)(int)functionParameters[2];
        }

        public override void RecordToTable(Record record)
        {
            var table = record.value;
            //bool hasValues = false;

            var xValue = (long)table["x"];
            x = xValue;
            var yValue = (long)table["y"];
            y = yValue;
            var layerValue = (long)table["layer"];
            layer = layerValue;
        }

        public override IMudTable RecordUpdateToTable(RecordUpdate tableUpdate)
        {
            PositionTableUpdate update = (PositionTableUpdate)tableUpdate;
            return update?.TypedValue.Item1;
        }

        public override RecordUpdate CreateTypedRecord(RecordUpdate newUpdate)
        {
            return new PositionTableUpdate
            {
                TableId = newUpdate.TableId,
                Key = newUpdate.Key,
                Value = newUpdate.Value,
                TypedValue = MapUpdates(newUpdate.Value)
            };
        }

        public static Tuple<PositionTable?, PositionTable?> MapUpdates(
            Tuple<Property?, Property?> value
        )
        {
            PositionTable? current = null;
            PositionTable? previous = null;

            if (value.Item1 != null)
            {
                try
                {
                    current = new PositionTable
                    {
                        x = value.Item1.TryGetValue("x", out var xVal) ? (long)xVal : default,
                        y = value.Item1.TryGetValue("y", out var yVal) ? (long)yVal : default,
                        layer = value.Item1.TryGetValue("layer", out var layerVal)
                            ? (long)layerVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    current = new PositionTable
                    {
                        x = null,
                        y = null,
                        layer = null,
                    };
                }
            }

            if (value.Item2 != null)
            {
                try
                {
                    previous = new PositionTable
                    {
                        x = value.Item2.TryGetValue("x", out var xVal) ? (long)xVal : default,
                        y = value.Item2.TryGetValue("y", out var yVal) ? (long)yVal : default,
                        layer = value.Item2.TryGetValue("layer", out var layerVal)
                            ? (long)layerVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    previous = new PositionTable
                    {
                        x = null,
                        y = null,
                        layer = null,
                    };
                }
            }

            return new Tuple<PositionTable?, PositionTable?>(current, previous);
        }
    }
}
