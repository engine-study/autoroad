/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class RoadConfigTable : IMudTable
    {
        public class RoadConfigTableUpdate : RecordUpdate
        {
            public int? Width;
            public int? PreviousWidth;
            public int? Left;
            public int? PreviousLeft;
            public int? Right;
            public int? PreviousRight;
        }

        public readonly static string ID = "RoadConfig";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public int? Width;
        public int? Left;
        public int? Right;

        public override Type TableType()
        {
            return typeof(RoadConfigTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(RoadConfigTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            RoadConfigTable other = (RoadConfigTable)obj;

            if (other == null)
            {
                return false;
            }
            if (Width != other.Width)
            {
                return false;
            }
            if (Left != other.Left)
            {
                return false;
            }
            if (Right != other.Right)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            Width = (int)functionParameters[0];

            Left = (int)functionParameters[1];

            Right = (int)functionParameters[2];
        }

        public static IObservable<RecordUpdate> GetRoadConfigTableUpdates()
        {
            RoadConfigTable mudTable = new RoadConfigTable();

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override void PropertyToTable(Property property)
        {
            Width = (int)property["width"];
            Left = (int)property["left"];
            Right = (int)property["right"];
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentRecordValue as Property;
            var previousValue = recordUpdate.PreviousRecordValue as Property;
            int? currentWidthTyped = null;
            int? previousWidthTyped = null;

            if (currentValue != null && currentValue.ContainsKey("width"))
            {
                currentWidthTyped = (int)currentValue["width"];
            }

            if (previousValue != null && previousValue.ContainsKey("width"))
            {
                previousWidthTyped = (int)previousValue["width"];
            }
            int? currentLeftTyped = null;
            int? previousLeftTyped = null;

            if (currentValue != null && currentValue.ContainsKey("left"))
            {
                currentLeftTyped = (int)currentValue["left"];
            }

            if (previousValue != null && previousValue.ContainsKey("left"))
            {
                previousLeftTyped = (int)previousValue["left"];
            }
            int? currentRightTyped = null;
            int? previousRightTyped = null;

            if (currentValue != null && currentValue.ContainsKey("right"))
            {
                currentRightTyped = (int)currentValue["right"];
            }

            if (previousValue != null && previousValue.ContainsKey("right"))
            {
                previousRightTyped = (int)previousValue["right"];
            }

            return new RoadConfigTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentRecordValue = recordUpdate.CurrentRecordValue,
                PreviousRecordValue = recordUpdate.PreviousRecordValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                Width = currentWidthTyped,
                PreviousWidth = previousWidthTyped,
                Left = currentLeftTyped,
                PreviousLeft = previousLeftTyped,
                Right = currentRightTyped,
                PreviousRight = previousRightTyped,
            };
        }
    }
}
