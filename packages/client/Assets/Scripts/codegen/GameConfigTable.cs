/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud.Client;
using mud.Network.schemas;
using mud.Unity;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;
using System.Collections.Generic;
using UnityEngine;

namespace DefaultNamespace
{
    public class GameConfigTableUpdate
        : TypedRecordUpdate<Tuple<GameConfigTable?, GameConfigTable?>> { }

    public class GameConfigTable : IMudTable
    {
        public readonly static TableId ID = new("", "GameConfig");

        public override TableId GetTableId()
        {
            return ID;
        }

        public bool? dummyPlayers;
        public bool? stressTest;

        public override Type TableType()
        {
            return typeof(GameConfigTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(GameConfigTableUpdate);
        }

        public override void SetValues(params object[] functionParameters)
        {
            dummyPlayers = (bool)functionParameters[0];

            stressTest = (bool)functionParameters[1];
        }

        public override bool SetValues(IEnumerable<Property> result)
        {
            var hasValues = false;
            foreach (var record in result)
            {
                var attribute = record["attribute"].ToString();
                var value = record["value"];

                switch (attribute)
                {
                    case "dummyPlayers":
                        var dummyPlayersValue = (bool)value;
                        dummyPlayers = dummyPlayersValue;
                        hasValues = true;
                        break;
                    case "stressTest":
                        var stressTestValue = (bool)value;
                        stressTest = stressTestValue;
                        hasValues = true;
                        break;
                }
            }

            return hasValues;
        }

        public override IMudTable GetTableValue(string key)
        {
            var query = new Query()
                .Find("?value", "?attribute")
                .Where(TableId.ToString(), key, "?attribute", "?value");
            var result = NetworkManager.Instance.ds.Query(query);
            var gameConfigTable = new GameConfigTable();
            var hasValues = false;

            foreach (var record in result)
            {
                var attribute = record["attribute"].ToString();
                var value = record["value"];

                switch (attribute)
                {
                    case "dummyPlayers":
                        var dummyPlayersValue = (bool)value;
                        gameConfigTable.dummyPlayers = dummyPlayersValue;
                        hasValues = true;
                        break;
                    case "stressTest":
                        var stressTestValue = (bool)value;
                        gameConfigTable.stressTest = stressTestValue;
                        hasValues = true;
                        break;
                }
            }

            return hasValues ? gameConfigTable : null;
        }

        public override IMudTable RecordUpdateToTable(RecordUpdate tableUpdate)
        {
            GameConfigTableUpdate update = (GameConfigTableUpdate)tableUpdate;
            return update?.TypedValue.Item1;
        }

        public override RecordUpdate CreateTypedRecord(RecordUpdate newUpdate)
        {
            return new GameConfigTableUpdate
            {
                TableId = newUpdate.TableId,
                Key = newUpdate.Key,
                Value = newUpdate.Value,
                TypedValue = MapUpdates(newUpdate.Value)
            };
        }

        public static Tuple<GameConfigTable?, GameConfigTable?> MapUpdates(
            Tuple<Property?, Property?> value
        )
        {
            GameConfigTable? current = null;
            GameConfigTable? previous = null;

            if (value.Item1 != null)
            {
                try
                {
                    current = new GameConfigTable
                    {
                        dummyPlayers = value.Item1.TryGetValue(
                            "dummyPlayers",
                            out var dummyPlayersVal
                        )
                            ? (bool)dummyPlayersVal
                            : default,
                        stressTest = value.Item1.TryGetValue("stressTest", out var stressTestVal)
                            ? (bool)stressTestVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    current = new GameConfigTable { dummyPlayers = null, stressTest = null, };
                }
            }

            if (value.Item2 != null)
            {
                try
                {
                    previous = new GameConfigTable
                    {
                        dummyPlayers = value.Item2.TryGetValue(
                            "dummyPlayers",
                            out var dummyPlayersVal
                        )
                            ? (bool)dummyPlayersVal
                            : default,
                        stressTest = value.Item2.TryGetValue("stressTest", out var stressTestVal)
                            ? (bool)stressTestVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    previous = new GameConfigTable { dummyPlayers = null, stressTest = null, };
                }
            }

            return new Tuple<GameConfigTable?, GameConfigTable?>(current, previous);
        }
    }
}
