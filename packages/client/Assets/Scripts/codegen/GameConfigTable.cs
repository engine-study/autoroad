/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using mud.Network.schemas;
using mud.Unity;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;
using System.Collections.Generic;
using UnityEngine;

namespace DefaultNamespace
{
    public class GameConfigTableUpdate
        : TypedRecordUpdate<Tuple<GameConfigTable?, GameConfigTable?>> { }

    public class GameConfigTable : IMudTable
    {
        public readonly static TableId ID = new("", "GameConfig");

        public override TableId GetTableId()
        {
            return ID;
        }

        public bool? debug;
        public bool? dummyPlayers;
        public bool? roadComplete;

        public override Type TableType()
        {
            return typeof(GameConfigTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(GameConfigTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            GameConfigTable other = (GameConfigTable)obj;

            if (other == null)
            {
                return false;
            }
            if (debug != other.debug)
            {
                return false;
            }
            if (dummyPlayers != other.dummyPlayers)
            {
                return false;
            }
            if (roadComplete != other.roadComplete)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            debug = (bool)functionParameters[0];

            dummyPlayers = (bool)functionParameters[1];

            roadComplete = (bool)functionParameters[2];
        }

        public override void RecordToTable(Record record)
        {
            var table = record.value;
            //bool hasValues = false;

            var debugValue = (bool)table["debug"];
            debug = debugValue;
            var dummyPlayersValue = (bool)table["dummyPlayers"];
            dummyPlayers = dummyPlayersValue;
            var roadCompleteValue = (bool)table["roadComplete"];
            roadComplete = roadCompleteValue;
        }

        public override IMudTable RecordUpdateToTable(RecordUpdate tableUpdate)
        {
            GameConfigTableUpdate update = (GameConfigTableUpdate)tableUpdate;
            return update?.TypedValue.Item1;
        }

        public override RecordUpdate CreateTypedRecord(RecordUpdate newUpdate)
        {
            return new GameConfigTableUpdate
            {
                TableId = newUpdate.TableId,
                Key = newUpdate.Key,
                Value = newUpdate.Value,
                TypedValue = MapUpdates(newUpdate.Value)
            };
        }

        public static Tuple<GameConfigTable?, GameConfigTable?> MapUpdates(
            Tuple<Property?, Property?> value
        )
        {
            GameConfigTable? current = null;
            GameConfigTable? previous = null;

            if (value.Item1 != null)
            {
                try
                {
                    current = new GameConfigTable
                    {
                        debug = value.Item1.TryGetValue("debug", out var debugVal)
                            ? (bool)debugVal
                            : default,
                        dummyPlayers = value.Item1.TryGetValue(
                            "dummyPlayers",
                            out var dummyPlayersVal
                        )
                            ? (bool)dummyPlayersVal
                            : default,
                        roadComplete = value.Item1.TryGetValue(
                            "roadComplete",
                            out var roadCompleteVal
                        )
                            ? (bool)roadCompleteVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    current = new GameConfigTable
                    {
                        debug = null,
                        dummyPlayers = null,
                        roadComplete = null,
                    };
                }
            }

            if (value.Item2 != null)
            {
                try
                {
                    previous = new GameConfigTable
                    {
                        debug = value.Item2.TryGetValue("debug", out var debugVal)
                            ? (bool)debugVal
                            : default,
                        dummyPlayers = value.Item2.TryGetValue(
                            "dummyPlayers",
                            out var dummyPlayersVal
                        )
                            ? (bool)dummyPlayersVal
                            : default,
                        roadComplete = value.Item2.TryGetValue(
                            "roadComplete",
                            out var roadCompleteVal
                        )
                            ? (bool)roadCompleteVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    previous = new GameConfigTable
                    {
                        debug = null,
                        dummyPlayers = null,
                        roadComplete = null,
                    };
                }
            }

            return new Tuple<GameConfigTable?, GameConfigTable?>(current, previous);
        }
    }
}
