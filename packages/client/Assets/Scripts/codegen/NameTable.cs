/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class NameTable : MUDTable
    {
        public class NameTableUpdate : RecordUpdate
        {
            public bool? Named;
            public bool? PreviousNamed;
            public int? First;
            public int? PreviousFirst;
            public int? Middle;
            public int? PreviousMiddle;
            public int? Last;
            public int? PreviousLast;
        }

        public readonly static string ID = "Name";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public bool? Named;
        public int? First;
        public int? Middle;
        public int? Last;

        public override Type TableType()
        {
            return typeof(NameTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(NameTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            NameTable other = (NameTable)obj;

            if (other == null)
            {
                return false;
            }
            if (Named != other.Named)
            {
                return false;
            }
            if (First != other.First)
            {
                return false;
            }
            if (Middle != other.Middle)
            {
                return false;
            }
            if (Last != other.Last)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            Named = (bool)functionParameters[0];

            First = (int)functionParameters[1];

            Middle = (int)functionParameters[2];

            Last = (int)functionParameters[3];
        }

        public static IObservable<RecordUpdate> GetNameTableUpdates()
        {
            NameTable mudTable = new NameTable();

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override void PropertyToTable(Property property)
        {
            Named = (bool)property["named"];
            First = (int)property["first"];
            Middle = (int)property["middle"];
            Last = (int)property["last"];
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentRecordValue as Property;
            var previousValue = recordUpdate.PreviousRecordValue as Property;
            bool? currentNamedTyped = null;
            bool? previousNamedTyped = null;

            if (currentValue != null && currentValue.ContainsKey("named"))
            {
                currentNamedTyped = (bool)currentValue["named"];
            }

            if (previousValue != null && previousValue.ContainsKey("named"))
            {
                previousNamedTyped = (bool)previousValue["named"];
            }
            int? currentFirstTyped = null;
            int? previousFirstTyped = null;

            if (currentValue != null && currentValue.ContainsKey("first"))
            {
                currentFirstTyped = (int)currentValue["first"];
            }

            if (previousValue != null && previousValue.ContainsKey("first"))
            {
                previousFirstTyped = (int)previousValue["first"];
            }
            int? currentMiddleTyped = null;
            int? previousMiddleTyped = null;

            if (currentValue != null && currentValue.ContainsKey("middle"))
            {
                currentMiddleTyped = (int)currentValue["middle"];
            }

            if (previousValue != null && previousValue.ContainsKey("middle"))
            {
                previousMiddleTyped = (int)previousValue["middle"];
            }
            int? currentLastTyped = null;
            int? previousLastTyped = null;

            if (currentValue != null && currentValue.ContainsKey("last"))
            {
                currentLastTyped = (int)currentValue["last"];
            }

            if (previousValue != null && previousValue.ContainsKey("last"))
            {
                previousLastTyped = (int)previousValue["last"];
            }

            return new NameTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentRecordValue = recordUpdate.CurrentRecordValue,
                PreviousRecordValue = recordUpdate.PreviousRecordValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                Named = currentNamedTyped,
                PreviousNamed = previousNamedTyped,
                First = currentFirstTyped,
                PreviousFirst = previousFirstTyped,
                Middle = currentMiddleTyped,
                PreviousMiddle = previousMiddleTyped,
                Last = currentLastTyped,
                PreviousLast = previousLastTyped,
            };
        }
    }
}
