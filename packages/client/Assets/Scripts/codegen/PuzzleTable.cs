/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using System.Linq;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    [System.Serializable]
    public class PuzzleTable : MUDTable
    {
        public class PuzzleTableUpdate : RecordUpdate
        {
            public uint? PuzzleType;
            public uint? PreviousPuzzleType;
            public bool? Complete;
            public bool? PreviousComplete;
            public string? Solver;
            public string? PreviousSolver;
        }

        public readonly static string ID = "Puzzle";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public uint? PuzzleType;
        public bool? Complete;
        public string? Solver;

        public override Type TableType()
        {
            return typeof(PuzzleTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(PuzzleTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            PuzzleTable other = (PuzzleTable)obj;

            if (other == null)
            {
                return false;
            }
            if (PuzzleType != other.PuzzleType)
            {
                return false;
            }
            if (Complete != other.Complete)
            {
                return false;
            }
            if (Solver != other.Solver)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            PuzzleType = (uint)functionParameters[0];

            Complete = (bool)functionParameters[1];

            Solver = (string)functionParameters[2];
        }

        public static IObservable<RecordUpdate> GetPuzzleTableUpdates()
        {
            PuzzleTable mudTable = new PuzzleTable();

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override void PropertyToTable(Property property)
        {
            PuzzleType = (uint)property["puzzleType"];
            Complete = (bool)property["complete"];
            Solver = (string)property["solver"];
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentRecordValue as Property;
            var previousValue = recordUpdate.PreviousRecordValue as Property;
            uint? currentPuzzleTypeTyped = null;
            uint? previousPuzzleTypeTyped = null;

            if (currentValue != null && currentValue.ContainsKey("puzzletype"))
            {
                currentPuzzleTypeTyped = (uint)currentValue["puzzletype"];
            }

            if (previousValue != null && previousValue.ContainsKey("puzzletype"))
            {
                previousPuzzleTypeTyped = (uint)previousValue["puzzletype"];
            }
            bool? currentCompleteTyped = null;
            bool? previousCompleteTyped = null;

            if (currentValue != null && currentValue.ContainsKey("complete"))
            {
                currentCompleteTyped = (bool)currentValue["complete"];
            }

            if (previousValue != null && previousValue.ContainsKey("complete"))
            {
                previousCompleteTyped = (bool)previousValue["complete"];
            }
            string? currentSolverTyped = null;
            string? previousSolverTyped = null;

            if (currentValue != null && currentValue.ContainsKey("solver"))
            {
                currentSolverTyped = (string)currentValue["solver"];
            }

            if (previousValue != null && previousValue.ContainsKey("solver"))
            {
                previousSolverTyped = (string)previousValue["solver"];
            }

            return new PuzzleTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentRecordValue = recordUpdate.CurrentRecordValue,
                PreviousRecordValue = recordUpdate.PreviousRecordValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                PuzzleType = currentPuzzleTypeTyped,
                PreviousPuzzleType = previousPuzzleTypeTyped,
                Complete = currentCompleteTyped,
                PreviousComplete = previousCompleteTyped,
                Solver = currentSolverTyped,
                PreviousSolver = previousSolverTyped,
            };
        }
    }
}
