/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud.Client;
using mud.Network.schemas;
using mud.Unity;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;
using System.Collections.Generic;
using UnityEngine;

namespace DefaultNamespace
{
    public class PuzzleTableUpdate : TypedRecordUpdate<Tuple<PuzzleTable?, PuzzleTable?>> { }

    public class PuzzleTable : IMudTable
    {
        public readonly static TableId ID = new("", "Puzzle");

        public override TableId GetTableId()
        {
            return ID;
        }

        public ulong? puzzleType;
        public bool? complete;

        public override Type TableType()
        {
            return typeof(PuzzleTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(PuzzleTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            PuzzleTable other = (PuzzleTable)obj;

            if (other == null)
            {
                return false;
            }
            if (puzzleType != other.puzzleType)
            {
                return false;
            }
            if (complete != other.complete)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            puzzleType = (ulong)(int)functionParameters[0];

            complete = (bool)functionParameters[1];
        }

        public override void RecordToTable(Record record)
        {
            var table = record.value;
            //bool hasValues = false;

            var puzzleTypeValue = (ulong)table["puzzleType"];
            puzzleType = puzzleTypeValue;
            var completeValue = (bool)table["complete"];
            complete = completeValue;
        }

        public override IMudTable RecordUpdateToTable(RecordUpdate tableUpdate)
        {
            PuzzleTableUpdate update = (PuzzleTableUpdate)tableUpdate;
            return update?.TypedValue.Item1;
        }

        public override RecordUpdate CreateTypedRecord(RecordUpdate newUpdate)
        {
            return new PuzzleTableUpdate
            {
                TableId = newUpdate.TableId,
                Key = newUpdate.Key,
                Value = newUpdate.Value,
                TypedValue = MapUpdates(newUpdate.Value)
            };
        }

        public static Tuple<PuzzleTable?, PuzzleTable?> MapUpdates(
            Tuple<Property?, Property?> value
        )
        {
            PuzzleTable? current = null;
            PuzzleTable? previous = null;

            if (value.Item1 != null)
            {
                try
                {
                    current = new PuzzleTable
                    {
                        puzzleType = value.Item1.TryGetValue("puzzleType", out var puzzleTypeVal)
                            ? (ulong)puzzleTypeVal
                            : default,
                        complete = value.Item1.TryGetValue("complete", out var completeVal)
                            ? (bool)completeVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    current = new PuzzleTable { puzzleType = null, complete = null, };
                }
            }

            if (value.Item2 != null)
            {
                try
                {
                    previous = new PuzzleTable
                    {
                        puzzleType = value.Item2.TryGetValue("puzzleType", out var puzzleTypeVal)
                            ? (ulong)puzzleTypeVal
                            : default,
                        complete = value.Item2.TryGetValue("complete", out var completeVal)
                            ? (bool)completeVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    previous = new PuzzleTable { puzzleType = null, complete = null, };
                }
            }

            return new Tuple<PuzzleTable?, PuzzleTable?>(current, previous);
        }
    }
}
