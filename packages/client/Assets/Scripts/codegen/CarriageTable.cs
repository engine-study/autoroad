/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud.Client;
using mud.Network.schemas;
using mud.Unity;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;
using System.Collections.Generic;
using UnityEngine;

namespace DefaultNamespace
{
    public class CarriageTableUpdate : TypedRecordUpdate<Tuple<CarriageTable?, CarriageTable?>> { }

    public class CarriageTable : IMudTable
    {
        public readonly static TableId ID = new("", "Carriage");

        public override TableId GetTableId()
        {
            return ID;
        }

        public bool? value;

        public override Type TableType()
        {
            return typeof(CarriageTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(CarriageTableUpdate);
        }

        public override void SetValues(params object[] functionParameters)
        {
            value = (bool)functionParameters[0];
        }

        public override void RecordToTable(Record record)
        {
            var table = record.value;
            //bool hasValues = false;

            var valueValue = (bool)table["value"];
            value = valueValue;
        }

        public override IMudTable RecordUpdateToTable(RecordUpdate tableUpdate)
        {
            CarriageTableUpdate update = (CarriageTableUpdate)tableUpdate;
            return update?.TypedValue.Item1;
        }

        public override RecordUpdate CreateTypedRecord(RecordUpdate newUpdate)
        {
            return new CarriageTableUpdate
            {
                TableId = newUpdate.TableId,
                Key = newUpdate.Key,
                Value = newUpdate.Value,
                TypedValue = MapUpdates(newUpdate.Value)
            };
        }

        public static Tuple<CarriageTable?, CarriageTable?> MapUpdates(
            Tuple<Property?, Property?> value
        )
        {
            CarriageTable? current = null;
            CarriageTable? previous = null;

            if (value.Item1 != null)
            {
                try
                {
                    current = new CarriageTable
                    {
                        value = value.Item1.TryGetValue("value", out var valueVal)
                            ? (bool)valueVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    current = new CarriageTable { value = null, };
                }
            }

            if (value.Item2 != null)
            {
                try
                {
                    previous = new CarriageTable
                    {
                        value = value.Item2.TryGetValue("value", out var valueVal)
                            ? (bool)valueVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    previous = new CarriageTable { value = null, };
                }
            }

            return new Tuple<CarriageTable?, CarriageTable?>(current, previous);
        }
    }
}
