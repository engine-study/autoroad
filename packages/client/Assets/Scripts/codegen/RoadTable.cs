/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using System.Linq;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class RoadTable : MUDTable
    {
        public class RoadTableUpdate : RecordUpdate
        {
            public uint? State;
            public uint? PreviousState;
            public string? Filled;
            public string? PreviousFilled;
            public bool? Gem;
            public bool? PreviousGem;
        }

        public readonly static string ID = "Road";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public uint? State;
        public string? Filled;
        public bool? Gem;

        public override Type TableType()
        {
            return typeof(RoadTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(RoadTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            RoadTable other = (RoadTable)obj;

            if (other == null)
            {
                return false;
            }
            if (State != other.State)
            {
                return false;
            }
            if (Filled != other.Filled)
            {
                return false;
            }
            if (Gem != other.Gem)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            State = (uint)functionParameters[0];

            Filled = (string)functionParameters[1];

            Gem = (bool)functionParameters[2];
        }

        public static IObservable<RecordUpdate> GetRoadTableUpdates()
        {
            RoadTable mudTable = new RoadTable();

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override void PropertyToTable(Property property)
        {
            State = (uint)property["state"];
            Filled = (string)property["filled"];
            Gem = (bool)property["gem"];
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentRecordValue as Property;
            var previousValue = recordUpdate.PreviousRecordValue as Property;
            uint? currentStateTyped = null;
            uint? previousStateTyped = null;

            if (currentValue != null && currentValue.ContainsKey("state"))
            {
                currentStateTyped = (uint)currentValue["state"];
            }

            if (previousValue != null && previousValue.ContainsKey("state"))
            {
                previousStateTyped = (uint)previousValue["state"];
            }
            string? currentFilledTyped = null;
            string? previousFilledTyped = null;

            if (currentValue != null && currentValue.ContainsKey("filled"))
            {
                currentFilledTyped = (string)currentValue["filled"];
            }

            if (previousValue != null && previousValue.ContainsKey("filled"))
            {
                previousFilledTyped = (string)previousValue["filled"];
            }
            bool? currentGemTyped = null;
            bool? previousGemTyped = null;

            if (currentValue != null && currentValue.ContainsKey("gem"))
            {
                currentGemTyped = (bool)currentValue["gem"];
            }

            if (previousValue != null && previousValue.ContainsKey("gem"))
            {
                previousGemTyped = (bool)previousValue["gem"];
            }

            return new RoadTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentRecordValue = recordUpdate.CurrentRecordValue,
                PreviousRecordValue = recordUpdate.PreviousRecordValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                State = currentStateTyped,
                PreviousState = previousStateTyped,
                Filled = currentFilledTyped,
                PreviousFilled = previousFilledTyped,
                Gem = currentGemTyped,
                PreviousGem = previousGemTyped,
            };
        }
    }
}
