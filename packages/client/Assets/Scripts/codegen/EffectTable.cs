/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using System.Linq;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class EffectTable : MUDTable
    {
        public class EffectTableUpdate : RecordUpdate
        {
            public bool[]? Value;
            public bool[]? PreviousValue;
        }

        public readonly static string ID = "Effect";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public bool[]? Value;

        public override Type TableType()
        {
            return typeof(EffectTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(EffectTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            EffectTable other = (EffectTable)obj;

            if (other == null)
            {
                return false;
            }
            if (Value != other.Value)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            Value = (bool[])functionParameters[0];
        }

        public static IObservable<RecordUpdate> GetEffectTableUpdates()
        {
            EffectTable mudTable = new EffectTable();

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override void PropertyToTable(Property property)
        {
            Value = ((object[])property["value"]).Cast<bool>().ToArray();
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentRecordValue as Property;
            var previousValue = recordUpdate.PreviousRecordValue as Property;
            bool[]? currentValueTyped = null;
            bool[]? previousValueTyped = null;

            if (currentValue != null && currentValue.ContainsKey("value"))
            {
                currentValueTyped = ((object[])currentValue["value"]).Cast<bool>().ToArray();
            }

            if (previousValue != null && previousValue.ContainsKey("value"))
            {
                previousValueTyped = ((object[])previousValue["value"]).Cast<bool>().ToArray();
            }

            return new EffectTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentRecordValue = recordUpdate.CurrentRecordValue,
                PreviousRecordValue = recordUpdate.PreviousRecordValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                Value = currentValueTyped,
                PreviousValue = previousValueTyped,
            };
        }
    }
}
