/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud.Client;
using mud.Network.schemas;
using mud.Unity;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;
using System.Collections.Generic;
using UnityEngine;

namespace DefaultNamespace
{
    public class ChunkTableUpdate : TypedRecordUpdate<Tuple<ChunkTable?, ChunkTable?>> { }

    public class ChunkTable : IMudTable
    {
        public readonly static TableId ID = new("", "Chunk");

        public override TableId GetTableId()
        {
            return ID;
        }

        public bool? completed;
        public long? mile;

        public override Type TableType()
        {
            return typeof(ChunkTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(ChunkTableUpdate);
        }

        public override void SetValues(params object[] functionParameters)
        {
            completed = (bool)functionParameters[0];

            mile = (long)(int)functionParameters[1];
        }

        public override void RecordToTable(Record record)
        {
            var table = record.value;
            //bool hasValues = false;

            var completedValue = (bool)table["completed"];

            completed = completedValue;

            var mileValue = (long)table["mile"];

            mile = mileValue;
        }

        public override IMudTable RecordUpdateToTable(RecordUpdate tableUpdate)
        {
            ChunkTableUpdate update = (ChunkTableUpdate)tableUpdate;
            return update?.TypedValue.Item1;
        }

        public override RecordUpdate CreateTypedRecord(RecordUpdate newUpdate)
        {
            return new ChunkTableUpdate
            {
                TableId = newUpdate.TableId,
                Key = newUpdate.Key,
                Value = newUpdate.Value,
                TypedValue = MapUpdates(newUpdate.Value)
            };
        }

        public static Tuple<ChunkTable?, ChunkTable?> MapUpdates(Tuple<Property?, Property?> value)
        {
            ChunkTable? current = null;
            ChunkTable? previous = null;

            if (value.Item1 != null)
            {
                try
                {
                    current = new ChunkTable
                    {
                        completed = value.Item1.TryGetValue("completed", out var completedVal)
                            ? (bool)completedVal
                            : default,
                        mile = value.Item1.TryGetValue("mile", out var mileVal)
                            ? (long)mileVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    current = new ChunkTable { completed = null, mile = null, };
                }
            }

            if (value.Item2 != null)
            {
                try
                {
                    previous = new ChunkTable
                    {
                        completed = value.Item2.TryGetValue("completed", out var completedVal)
                            ? (bool)completedVal
                            : default,
                        mile = value.Item2.TryGetValue("mile", out var mileVal)
                            ? (long)mileVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    previous = new ChunkTable { completed = null, mile = null, };
                }
            }

            return new Tuple<ChunkTable?, ChunkTable?>(current, previous);
        }
    }
}
