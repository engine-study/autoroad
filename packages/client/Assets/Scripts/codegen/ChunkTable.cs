/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class ChunkTable : IMudTable
    {
        public class ChunkTableUpdate : RecordUpdate
        {
            public int? Mile;
            public int? PreviousMile;
            public bool? Spawned;
            public bool? PreviousSpawned;
            public bool? Completed;
            public bool? PreviousCompleted;
            public int? Roads;
            public int? PreviousRoads;
            public System.Numerics.BigInteger? BlockCompleted;
            public System.Numerics.BigInteger? PreviousBlockCompleted;
        }

        public readonly static string ID = "Chunk";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public int? Mile;
        public bool? Spawned;
        public bool? Completed;
        public int? Roads;
        public System.Numerics.BigInteger? BlockCompleted;

        public override Type TableType()
        {
            return typeof(ChunkTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(ChunkTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            ChunkTable other = (ChunkTable)obj;

            if (other == null)
            {
                return false;
            }
            if (Mile != other.Mile)
            {
                return false;
            }
            if (Spawned != other.Spawned)
            {
                return false;
            }
            if (Completed != other.Completed)
            {
                return false;
            }
            if (Roads != other.Roads)
            {
                return false;
            }
            if (BlockCompleted != other.BlockCompleted)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            Mile = (int)functionParameters[0];

            Spawned = (bool)functionParameters[1];

            Completed = (bool)functionParameters[2];

            Roads = (int)functionParameters[3];

            BlockCompleted = (System.Numerics.BigInteger)functionParameters[4];
        }

        public static IObservable<RecordUpdate> GetChunkTableUpdates()
        {
            ChunkTable mudTable = new ChunkTable();

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override void PropertyToTable(Property property)
        {
            Mile = (int)property["mile"];
            Spawned = (bool)property["spawned"];
            Completed = (bool)property["completed"];
            Roads = (int)property["roads"];
            BlockCompleted = (System.Numerics.BigInteger)property["blockCompleted"];
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentRecordValue as Property;
            var previousValue = recordUpdate.PreviousRecordValue as Property;
            int? currentMileTyped = null;
            int? previousMileTyped = null;

            if (currentValue != null && currentValue.ContainsKey("mile"))
            {
                currentMileTyped = (int)currentValue["mile"];
            }

            if (previousValue != null && previousValue.ContainsKey("mile"))
            {
                previousMileTyped = (int)previousValue["mile"];
            }
            bool? currentSpawnedTyped = null;
            bool? previousSpawnedTyped = null;

            if (currentValue != null && currentValue.ContainsKey("spawned"))
            {
                currentSpawnedTyped = (bool)currentValue["spawned"];
            }

            if (previousValue != null && previousValue.ContainsKey("spawned"))
            {
                previousSpawnedTyped = (bool)previousValue["spawned"];
            }
            bool? currentCompletedTyped = null;
            bool? previousCompletedTyped = null;

            if (currentValue != null && currentValue.ContainsKey("completed"))
            {
                currentCompletedTyped = (bool)currentValue["completed"];
            }

            if (previousValue != null && previousValue.ContainsKey("completed"))
            {
                previousCompletedTyped = (bool)previousValue["completed"];
            }
            int? currentRoadsTyped = null;
            int? previousRoadsTyped = null;

            if (currentValue != null && currentValue.ContainsKey("roads"))
            {
                currentRoadsTyped = (int)currentValue["roads"];
            }

            if (previousValue != null && previousValue.ContainsKey("roads"))
            {
                previousRoadsTyped = (int)previousValue["roads"];
            }
            System.Numerics.BigInteger? currentBlockCompletedTyped = null;
            System.Numerics.BigInteger? previousBlockCompletedTyped = null;

            if (currentValue != null && currentValue.ContainsKey("blockcompleted"))
            {
                currentBlockCompletedTyped = (System.Numerics.BigInteger)
                    currentValue["blockcompleted"];
            }

            if (previousValue != null && previousValue.ContainsKey("blockcompleted"))
            {
                previousBlockCompletedTyped = (System.Numerics.BigInteger)
                    previousValue["blockcompleted"];
            }

            return new ChunkTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentRecordValue = recordUpdate.CurrentRecordValue,
                PreviousRecordValue = recordUpdate.PreviousRecordValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                Mile = currentMileTyped,
                PreviousMile = previousMileTyped,
                Spawned = currentSpawnedTyped,
                PreviousSpawned = previousSpawnedTyped,
                Completed = currentCompletedTyped,
                PreviousCompleted = previousCompletedTyped,
                Roads = currentRoadsTyped,
                PreviousRoads = previousRoadsTyped,
                BlockCompleted = currentBlockCompletedTyped,
                PreviousBlockCompleted = previousBlockCompletedTyped,
            };
        }
    }
}
