/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud.Client;
using mud.Network.schemas;
using mud.Unity;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;
using System.Collections.Generic;
using UnityEngine;

namespace DefaultNamespace
{
    public class ChunkTableUpdate : TypedRecordUpdate<Tuple<ChunkTable?, ChunkTable?>> { }

    public class ChunkTable : IMudTable
    {
        public readonly static TableId ID = new("", "Chunk");

        public override TableId GetTableId()
        {
            return ID;
        }

        public bool? completed;
        public long? mile;
        public ulong? pieces;
        public System.Numerics.BigInteger? blockCompleted;

        public override Type TableType()
        {
            return typeof(ChunkTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(ChunkTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            ChunkTable other = (ChunkTable)obj;

            if (other == null)
            {
                return false;
            }
            if (completed != other.completed)
            {
                return false;
            }
            if (mile != other.mile)
            {
                return false;
            }
            if (pieces != other.pieces)
            {
                return false;
            }
            if (blockCompleted != other.blockCompleted)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            completed = (bool)functionParameters[0];

            mile = (long)(int)functionParameters[1];

            pieces = (ulong)(int)functionParameters[2];

            blockCompleted = (System.Numerics.BigInteger)functionParameters[3];
        }

        public override void RecordToTable(Record record)
        {
            var table = record.value;
            //bool hasValues = false;

            var completedValue = (bool)table["completed"];
            completed = completedValue;
            var mileValue = (long)table["mile"];
            mile = mileValue;
            var piecesValue = (ulong)table["pieces"];
            pieces = piecesValue;
            var blockCompletedValue = (System.Numerics.BigInteger)table["blockCompleted"];
            blockCompleted = blockCompletedValue;
        }

        public override IMudTable RecordUpdateToTable(RecordUpdate tableUpdate)
        {
            ChunkTableUpdate update = (ChunkTableUpdate)tableUpdate;
            return update?.TypedValue.Item1;
        }

        public override RecordUpdate CreateTypedRecord(RecordUpdate newUpdate)
        {
            return new ChunkTableUpdate
            {
                TableId = newUpdate.TableId,
                Key = newUpdate.Key,
                Value = newUpdate.Value,
                TypedValue = MapUpdates(newUpdate.Value)
            };
        }

        public static Tuple<ChunkTable?, ChunkTable?> MapUpdates(Tuple<Property?, Property?> value)
        {
            ChunkTable? current = null;
            ChunkTable? previous = null;

            if (value.Item1 != null)
            {
                try
                {
                    current = new ChunkTable
                    {
                        completed = value.Item1.TryGetValue("completed", out var completedVal)
                            ? (bool)completedVal
                            : default,
                        mile = value.Item1.TryGetValue("mile", out var mileVal)
                            ? (long)mileVal
                            : default,
                        pieces = value.Item1.TryGetValue("pieces", out var piecesVal)
                            ? (ulong)piecesVal
                            : default,
                        blockCompleted = value.Item1.TryGetValue(
                            "blockCompleted",
                            out var blockCompletedVal
                        )
                            ? (System.Numerics.BigInteger)blockCompletedVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    current = new ChunkTable
                    {
                        completed = null,
                        mile = null,
                        pieces = null,
                        blockCompleted = null,
                    };
                }
            }

            if (value.Item2 != null)
            {
                try
                {
                    previous = new ChunkTable
                    {
                        completed = value.Item2.TryGetValue("completed", out var completedVal)
                            ? (bool)completedVal
                            : default,
                        mile = value.Item2.TryGetValue("mile", out var mileVal)
                            ? (long)mileVal
                            : default,
                        pieces = value.Item2.TryGetValue("pieces", out var piecesVal)
                            ? (ulong)piecesVal
                            : default,
                        blockCompleted = value.Item2.TryGetValue(
                            "blockCompleted",
                            out var blockCompletedVal
                        )
                            ? (System.Numerics.BigInteger)blockCompletedVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    previous = new ChunkTable
                    {
                        completed = null,
                        mile = null,
                        pieces = null,
                        blockCompleted = null,
                    };
                }
            }

            return new Tuple<ChunkTable?, ChunkTable?>(current, previous);
        }
    }
}
