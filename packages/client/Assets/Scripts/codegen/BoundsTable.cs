/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud.Client;
using mud.Network.schemas;
using mud.Unity;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;
using System.Collections.Generic;
using UnityEngine;

namespace DefaultNamespace
{
    public class BoundsTableUpdate : TypedRecordUpdate<Tuple<BoundsTable?, BoundsTable?>> { }

    public class BoundsTable : IMudTable
    {
        public readonly static TableId ID = new("", "Bounds");

        public override TableId GetTableId()
        {
            return ID;
        }

        public long? left;
        public long? right;
        public long? up;
        public long? down;

        public override Type TableType()
        {
            return typeof(BoundsTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(BoundsTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            BoundsTable other = (BoundsTable)obj;

            if (other == null)
            {
                return false;
            }
            if (left != other.left)
            {
                return false;
            }
            if (right != other.right)
            {
                return false;
            }
            if (up != other.up)
            {
                return false;
            }
            if (down != other.down)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            left = (long)(int)functionParameters[0];

            right = (long)(int)functionParameters[1];

            up = (long)(int)functionParameters[2];

            down = (long)(int)functionParameters[3];
        }

        public override void RecordToTable(Record record)
        {
            var table = record.value;
            //bool hasValues = false;

            var leftValue = (long)table["left"];
            left = leftValue;
            var rightValue = (long)table["right"];
            right = rightValue;
            var upValue = (long)table["up"];
            up = upValue;
            var downValue = (long)table["down"];
            down = downValue;
        }

        public override IMudTable RecordUpdateToTable(RecordUpdate tableUpdate)
        {
            BoundsTableUpdate update = (BoundsTableUpdate)tableUpdate;
            return update?.TypedValue.Item1;
        }

        public override RecordUpdate CreateTypedRecord(RecordUpdate newUpdate)
        {
            return new BoundsTableUpdate
            {
                TableId = newUpdate.TableId,
                Key = newUpdate.Key,
                Value = newUpdate.Value,
                TypedValue = MapUpdates(newUpdate.Value)
            };
        }

        public static Tuple<BoundsTable?, BoundsTable?> MapUpdates(
            Tuple<Property?, Property?> value
        )
        {
            BoundsTable? current = null;
            BoundsTable? previous = null;

            if (value.Item1 != null)
            {
                try
                {
                    current = new BoundsTable
                    {
                        left = value.Item1.TryGetValue("left", out var leftVal)
                            ? (long)leftVal
                            : default,
                        right = value.Item1.TryGetValue("right", out var rightVal)
                            ? (long)rightVal
                            : default,
                        up = value.Item1.TryGetValue("up", out var upVal) ? (long)upVal : default,
                        down = value.Item1.TryGetValue("down", out var downVal)
                            ? (long)downVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    current = new BoundsTable
                    {
                        left = null,
                        right = null,
                        up = null,
                        down = null,
                    };
                }
            }

            if (value.Item2 != null)
            {
                try
                {
                    previous = new BoundsTable
                    {
                        left = value.Item2.TryGetValue("left", out var leftVal)
                            ? (long)leftVal
                            : default,
                        right = value.Item2.TryGetValue("right", out var rightVal)
                            ? (long)rightVal
                            : default,
                        up = value.Item2.TryGetValue("up", out var upVal) ? (long)upVal : default,
                        down = value.Item2.TryGetValue("down", out var downVal)
                            ? (long)downVal
                            : default,
                    };
                }
                catch (InvalidCastException)
                {
                    previous = new BoundsTable
                    {
                        left = null,
                        right = null,
                        up = null,
                        down = null,
                    };
                }
            }

            return new Tuple<BoundsTable?, BoundsTable?>(current, previous);
        }
    }
}
