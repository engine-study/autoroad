{% comment %}
// Copyright 2020 Visual Design Cafe. All rights reserved.
// This shader was created using ShaderX, a shader framework by Visual Design Cafe.
// https://www.visualdesigncafe.com/shaderx
{% endcomment %}

{% universal %}

    // Vertex
    #if defined(SHADERPASS_SHADOWCASTER)
        float3 _LightDirection;
    #endif

    float4 UnityObjectToClipPos( float3 positionOS, float3 positionWS, float3 normalWS )
    {
        float4 positionCS = TransformWorldToHClip(positionWS);

        #if defined(SHADERPASS_SHADOWCASTER)
            #if UNITY_REVERSED_Z
                positionCS.z = min(positionCS.z, positionCS.w * UNITY_NEAR_CLIP_VALUE);
            #else
                positionCS.z = max(positionCS.z, positionCS.w * UNITY_NEAR_CLIP_VALUE);
            #endif
        #endif

        return positionCS;
    }

    SurfaceInput vert( VertexAttributes input )
    {
        SurfaceInput output = (SurfaceInput)0;

        UNITY_SETUP_INSTANCE_ID(input);
        UNITY_TRANSFER_INSTANCE_ID(input, output);
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(output);

        {% if PreVertexMethod %}
            {{PreVertexMethod}}( input );
        {% endif %}

        float3 positionWS = TransformObjectToWorld(input.positionOS);
        float3 normalWS = TransformObjectToWorldNormal(input.normalOS);
        float4 tangentWS = float4(TransformObjectToWorldDir(input.tangentOS.xyz), input.tangentOS.w);

        #if defined(SHADERPASS_SHADOWCASTER)
            positionWS = ApplyShadowBias( positionWS, normalWS, _LightDirection );
        #endif

        output.positionCS = UnityObjectToClipPos( input.positionOS.xyz, positionWS, normalWS );
        output.positionWS = positionWS;
        output.normalWS = normalWS;			// normalized in TransformObjectToWorldNormal()
        output.tangentWS = tangentWS;		// normalized in TransformObjectToWorldDir()

        {% if SURFACE_NEEDS_UV0 %}
            output.uv0 = input.uv0;
        {% endif %}
        {% if SURFACE_NEEDS_UV1 %}
            output.uv1 = input.uv1;
        {% endif %}
        {% if SURFACE_NEEDS_UV2 %}
            output.uv2 = input.uv2;
        {% endif %}
        {% if SURFACE_NEEDS_UV3 %}
            output.uv3 = input.uv3;
        {% endif %}

        output.color = input.color;
        output.viewDirectionWS.xyz = normalize( _WorldSpaceCameraPos.xyz - positionWS );

        {% if VertexMethod %}
            {{VertexMethod}}( input, output, float4(0,0,0,0) );

            input.positionOS = TransformWorldToObject( output.positionWS );
            output.positionCS = UnityObjectToClipPos( input.positionOS.xyz, output.positionWS, output.normalWS );

            {% if SURFACE_NEEDS_UV0 %}
                input.uv0 = output.uv0;
            {% endif %}
            {% if SURFACE_NEEDS_UV1 %}
                input.uv1 = output.uv1;
            {% endif %}
            {% if SURFACE_NEEDS_UV2 %}
                input.uv2 = output.uv2;
            {% endif %}
            {% if SURFACE_NEEDS_UV3 %}
                input.uv3 = output.uv3;
            {% endif %}
        {% endif %}

        positionWS = output.positionWS;
        normalWS = output.normalWS;			// normalized in TransformObjectToWorldNormal()
        tangentWS = output.tangentWS;		// normalized in TransformObjectToWorldDir()

        #if SHADERPASS == SHADERPASS_FORWARD
            OUTPUT_LIGHTMAP_UV(input.uv1, unity_LightmapST, output.ambientOrLightmapUV);
            OUTPUT_SH(normalWS, output.ambientOrLightmapUV);
        #endif

        {% if pass.name == "Universal Forward" %}
            #ifdef _MAIN_LIGHT_SHADOWS
                output.shadowCoord = TransformWorldToShadowCoord( positionWS );
            #endif

            #ifdef VARYINGS_NEED_FOG_AND_VERTEX_LIGHT
                half3 vertexLight = VertexLighting(positionWS, normalWS);
                half fogFactor = ComputeFogFactor(output.positionCS.z);
                output.fogFactorAndVertexLight = half4(fogFactor, vertexLight);
            #endif
        {% endif %}

        {% if PostVertexMethod %}
            {{PostVertexMethod}}( input, output );
        {% endif %}

        return output;
    }

    // Fragment
    float3 SurfaceNormalToWorldSpaceNormal( 
        float3 surfaceNormal, float3 vertexNormalWS, float4 tangentWS,
        out float3x3 tangentToWorld )
    {
        float crossSign = (tangentWS.w > 0.0 ? 1.0 : -1.0) * GetOddNegativeScale();
        float3 bitangent = crossSign * cross(vertexNormalWS.xyz, tangentWS.xyz);
        tangentToWorld = half3x3(tangentWS.xyz, bitangent, vertexNormalWS.xyz);

        #if _NORMAL_DROPOFF_TS
            float3 normalWS = TransformTangentToWorld( surfaceNormal, tangentToWorld);
        #elif _NORMAL_DROPOFF_OS
            float3 normalWS = TransformObjectToWorldNormal(surfaceNormal);
        #elif _NORMAL_DROPOFF_WS
            float3 normalWS = surfaceNormal;
        #endif

        #ifdef _NORMALMAP
            normalWS = normalize(normalWS);
        #endif

        return normalWS;
    }

    half4 frag(SurfaceInput input) : SV_TARGET 
    {    
        UNITY_SETUP_INSTANCE_ID(input);
        UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(input);

        // Normalize the ViewDirection per-pixel so that we have an accurate value.
        input.viewDirectionWS.xyz = normalize(input.viewDirectionWS.xyz);

        #ifdef LOD_FADE_CROSSFADE
            // TODO: Dithering is not stable for shadows. Not a big issue since it is usually not noticeable, or the fade is further away than the shadow rendering distance.
            #if !defined(SHADER_API_GLES)
                LODDitheringTransition(
                    ComputeFadeMaskSeed( 
                        GetWorldSpaceNormalizeViewDir(input.positionWS), // we need a very accurate view direction to get good dithering. The regular viewDirectionWS that we get as input is not accurate enough because it is calculated per-vertex and then interpolated. That is why we calculate the view direction again here.
                        input.positionCS.xy),
                    unity_LODFade.x);
            #endif
        #endif

        Surface surface = (Surface)0;
        surface.Albedo = 1;
        surface.Emission = 0;
        surface.Metallic = 0;
        surface.Smoothness = 0.5;
        surface.Occlusion = 1;
        surface.Alpha = 1;
        surface.Normal = float3(0,0,1);
        SurfaceMethod( input, surface );

        {% if pass.name == "Universal Forward" %}
            
            float3x3 tangentToWorld;
            surface.Normal = 
                SurfaceNormalToWorldSpaceNormal( surface.Normal, input.normalWS, input.tangentWS, tangentToWorld );

            // Calculate per-pixel shadow coordinates for shadow cascades.
            #if defined(MAIN_LIGHT_CALCULATE_SHADOWS)
                input.shadowCoord = TransformWorldToShadowCoord(input.positionWS);
            #endif

             // Lighting Input
            SurfaceLighting lighting = (SurfaceLighting)0;

            // The main light is sampled in the UniversalFragmentPBR, but it is not returned.
            // If we have a PostLightingMethod then we need to make sure that the lighting
            // data is available, so we sample the light here.
            // It is best to replace the UniversalFragmentPBR method with a custom method
            // that returns the data we need.
            {% if PostLightingMethod %}
                lighting.light = GetMainLight( input.shadowCoord );
                lighting.light.direction *= -1; // TODO: Should this really be inverted?
            {% else %}
                lighting.light = (Light)0;
            {% endif %}

            #ifdef LIGHTMAP_ON
                lighting.indirect.diffuse = 
                    SampleLightmap( input.ambientOrLightmapUV.xy, surface.Normal.xyz );
            #else
                lighting.indirect.diffuse = 
                    SampleSHPixel( input.ambientOrLightmapUV.xyz, surface.Normal.xyz );
            #endif

            {% if LightingMethod %}

                // Custom lighting method.
                half4 color = {{LightingMethod}}( input, surface, /* inout */ lighting );

            {% else %}

                // Unity's URP lighting method.
                InputData inputData = (InputData)0;
                inputData.positionWS = input.positionWS;
                inputData.normalWS = surface.Normal;
                inputData.viewDirectionWS = input.viewDirectionWS.xyz;
                inputData.shadowCoord = input.shadowCoord;
                inputData.fogCoord = input.fogFactorAndVertexLight.x;
                inputData.vertexLighting = input.fogFactorAndVertexLight.yzw;
                inputData.bakedGI = lighting.indirect.diffuse;
                {% if unity.version.major >= 2020 %}
                    inputData.normalizedScreenSpaceUV = GetNormalizedScreenSpaceUV(input.positionCS);
                    inputData.shadowMask = SAMPLE_SHADOWMASK(input.lightmapUV);
                {% endif %}
                {% if unity.version.major >= 2021 %}
                    inputData.tangentToWorld = tangentToWorld;
                {% endif %}

                #ifdef _SPECULAR_SETUP
                    float3 specular = surface.Specular;
                    float metallic = 1;
                #else   
                    float3 specular = 0;
                    float metallic = surface.Metallic;
                #endif

                #ifdef _LIGHTING_QUALITY_LOW
                    half4 color = 
                        UniversalFragmentBlinnPhong(
                            inputData, 
                            surface.Albedo, 
                            half4(surface.Smoothness.xxx,1), 
                            exp2(10 * surface.Smoothness + 1), 
                            surface.Emission, 
                            surface.Alpha
                            {% if unity.version.major > 2021 or unity.version.string == "2021.2" or unity.version.string == "2021.3" %}
                                , surface.Normal 
                            {% endif %}
                            );
                #else
                    half4 color = 
                        UniversalFragmentPBR(
                            inputData,
                            surface.Albedo,
                            metallic,
                            specular,
                            surface.Smoothness,
                            surface.Occlusion,
                            surface.Emission,
                            surface.Alpha);
                #endif

            {% endif %}

            {% if PostLightingMethod %}
                PostLightingMethod( input, surface, lighting, /* inout */ color );
            {% endif %}

            color.rgb = MixFog( color.rgb, input.fogFactorAndVertexLight.x ); 
            return color;

        {% elseif pass.name == "Meta" %}
            MetaInput metaInput = (MetaInput)0;
            metaInput.Albedo = surface.Albedo;
            metaInput.Emission = surface.Emission;
            return MetaFragment(metaInput);

        {% elseif pass.light_mode == "Universal2D" %}
            return half4(surface.Albedo, surface.Alpha);

        {% elseif pass.name == "DepthNormals" %}
            float3x3 _;
            return float4(
                PackNormalOctRectEncode(
                    TransformWorldToViewDir(
                        SurfaceNormalToWorldSpaceNormal( surface.Normal, input.normalWS, input.tangentWS, _ ), 
                        true)),
                0.0, 
                0.0);

        {% else %}
            return 0;

        {% endif %}
    }
{% enduniversal %}