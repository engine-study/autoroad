{% comment %}
// Copyright 2020 Visual Design Cafe. All rights reserved.
// This shader was created using ShaderX, a shader framework by Visual Design Cafe.
// https://www.visualdesigncafe.com/shaderx
{% endcomment %}

{% comment %}
// This file is used to add support for the same API in all render pipelines.
// Code for the "Space Transform" functions from URP and HDRP are included in this file so that they
// can be used in the built-in render pipeline.
{% endcomment %}

{% standard %}

    #define UNITY_MATRIX_M     unity_ObjectToWorld
    #define UNITY_MATRIX_I_M   unity_WorldToObject

    #define real float
    #define real3 float3
    #define real3x3 float3x3

    #if defined(USING_STEREO_MATRICES)
        #define UNITY_MATRIX_UNJITTERED_VP  _StereoNonJitteredVP[unity_StereoEyeIndex]
        #define UNITY_MATRIX_PREV_VP        _StereoPreviousVP[unity_StereoEyeIndex]
    #else
        #define UNITY_MATRIX_UNJITTERED_VP _NonJitteredVP
        #define UNITY_MATRIX_PREV_VP _PreviousVP
    #endif

    // Return the PreTranslated ObjectToWorld Matrix (i.e matrix with _WorldSpaceCameraPos apply to it if we use camera relative rendering)
    float4x4 GetObjectToWorldMatrix()
    {
        return UNITY_MATRIX_M;
    }

    float4x4 GetWorldToObjectMatrix()
    {
        return UNITY_MATRIX_I_M;
    }

    float4x4 GetWorldToViewMatrix()
    {
        return UNITY_MATRIX_V;
    }

    // Transform to homogenous clip space
    float4x4 GetWorldToHClipMatrix()
    {
        return UNITY_MATRIX_VP;
    }

    // Transform to homogenous clip space
    float4x4 GetViewToHClipMatrix()
    {
        return UNITY_MATRIX_P;
    }

    // This function always return the absolute position in WS
    float3 GetAbsolutePositionWS(float3 positionRWS)
    {
    #if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
        positionRWS += _WorldSpaceCameraPos;
    #endif
        return positionRWS;
    }

    // This function return the camera relative position in WS
    float3 GetCameraRelativePositionWS(float3 positionWS)
    {
    #if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
        positionWS -= _WorldSpaceCameraPos;
    #endif
        return positionWS;
    }

    real GetOddNegativeScale()
    {
        return unity_WorldTransformParams.w;
    }

    float3 TransformObjectToWorld(float3 positionOS)
    {
        return mul(GetObjectToWorldMatrix(), float4(positionOS, 1.0)).xyz;
    }

    float3 TransformWorldToObject(float3 positionWS)
    {
        return mul(GetWorldToObjectMatrix(), float4(positionWS, 1.0)).xyz;
    }

    float3 TransformWorldToView(float3 positionWS)
    {
        return mul(GetWorldToViewMatrix(), float4(positionWS, 1.0)).xyz;
    }

    // Transforms position from object space to homogenous space
    float4 TransformObjectToHClip(float3 positionOS)
    {
        // More efficient than computing M*VP matrix product
        return mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), float4(positionOS, 1.0)));
    }

    // Tranforms position from world space to homogenous space
    float4 TransformWorldToHClip(float3 positionWS)
    {
        return mul(GetWorldToHClipMatrix(), float4(positionWS, 1.0));
    }

    // Tranforms position from view space to homogenous space
    float4 TransformWViewToHClip(float3 positionVS)
    {
        return mul(GetViewToHClipMatrix(), float4(positionVS, 1.0));
    }

    // Normalize to support uniform scaling
    float3 TransformObjectToWorldDir(float3 dirOS, bool doNormalize = true)
    {
        float3 dirWS = mul((float3x3)GetObjectToWorldMatrix(), dirOS);
        if (doNormalize)
            return SafeNormalize(dirWS);

        return dirWS;
    }

    // Normalize to support uniform scaling
    float3 TransformWorldToObjectDir(float3 dirWS, bool doNormalize = true)
    {
        float3 dirOS = mul((float3x3)GetWorldToObjectMatrix(), dirWS);
        if (doNormalize)
            return normalize(dirOS);

        return dirOS;
    }

    // Tranforms vector from world space to view space
    real3 TransformWorldToViewDir(real3 dirWS, bool doNormalize = false)
    {
        float3 dirVS = mul((real3x3)GetWorldToViewMatrix(), dirWS).xyz;
        if (doNormalize)
            return normalize(dirVS);

        return dirVS; 
    }

    // Tranforms vector from world space to homogenous space
    real3 TransformWorldToHClipDir(real3 directionWS, bool doNormalize = false)
    {
        float3 dirHCS = mul((real3x3)GetWorldToHClipMatrix(), directionWS).xyz;
        if (doNormalize)
            return normalize(dirHCS);

        return dirHCS;
    }

    // Transforms normal from object to world space
    float3 TransformObjectToWorldNormal(float3 normalOS, bool doNormalize = true)
    {
    #ifdef UNITY_ASSUME_UNIFORM_SCALING
        return TransformObjectToWorldDir(normalOS, doNormalize);
    #else
        // Normal need to be multiply by inverse transpose
        float3 normalWS = mul(normalOS, (float3x3)GetWorldToObjectMatrix());
        if (doNormalize)
            return SafeNormalize(normalWS);

        return normalWS;
    #endif
    }

    // Transforms normal from world to object space
    float3 TransformWorldToObjectNormal(float3 normalWS, bool doNormalize = true)
    {
    #ifdef UNITY_ASSUME_UNIFORM_SCALING
        return TransformWorldToObjectDir(normalWS, doNormalize);
    #else
        // Normal need to be multiply by inverse transpose
        float3 normalOS = mul(normalWS, (float3x3)GetObjectToWorldMatrix());
        if (doNormalize)
            return SafeNormalize(normalOS);

        return normalOS;
    #endif
    }

    real3x3 CreateTangentToWorld(real3 normal, real3 tangent, real flipSign)
    {
        // For odd-negative scale transforms we need to flip the sign
        real sgn = flipSign * GetOddNegativeScale();
        real3 bitangent = cross(normal, tangent) * sgn;

        return real3x3(tangent, bitangent, normal);
    }

    real3 TransformTangentToWorld(real3 dirTS, real3x3 tangentToWorld)
    {
        // Note matrix is in row major convention with left multiplication as it is build on the fly
        return mul(dirTS, tangentToWorld);
    }

    // This function does the exact inverse of TransformTangentToWorld() and is
    // also decribed within comments in mikktspace.h and it follows implicitly
    // from the scalar triple product (google it).
    real3 TransformWorldToTangent(real3 dirWS, real3x3 tangentToWorld)
    {
        // Note matrix is in row major convention with left multiplication as it is build on the fly
        float3 row0 = tangentToWorld[0];
        float3 row1 = tangentToWorld[1];
        float3 row2 = tangentToWorld[2];
        
        // these are the columns of the inverse matrix but scaled by the determinant
        float3 col0 = cross(row1, row2);
        float3 col1 = cross(row2, row0);
        float3 col2 = cross(row0, row1);
        
        float determinant = dot(row0, col0);
        float sgn = determinant<0.0 ? (-1.0) : 1.0;
        
        // inverse transposed but scaled by determinant
        // Will remove transpose part by using matrix as the first arg in the mul() below
        // this makes it the exact inverse of what TransformTangentToWorld() does.
        real3x3 matTBN_I_T = real3x3(col0, col1, col2);
        
        return SafeNormalize( sgn * mul(matTBN_I_T, dirWS) );
    }

    real3 TransformTangentToObject(real3 dirTS, real3x3 tangentToWorld)
    {
        // Note matrix is in row major convention with left multiplication as it is build on the fly
        real3 normalWS = TransformTangentToWorld(dirTS, tangentToWorld);
        return TransformWorldToObjectNormal(normalWS);
    }

    real3 TransformObjectToTangent(real3 dirOS, real3x3 tangentToWorld)
    {
        // Note matrix is in row major convention with left multiplication as it is build on the fly

        // don't normalize, as normalWS will be normalized after TransformWorldToTangent 
        float3 normalWS = TransformObjectToWorldNormal(dirOS, false);
        
        // transform from world to tangent
        return TransformWorldToTangent(normalWS, tangentToWorld);
    }

    // This function assumes the bitangent flip is encoded in tangentWS.w
    float3x3 BuildTangentToWorld(float4 tangentWS, float3 normalWS)
    {
        // tangentWS must not be normalized (mikkts requirement)

        // Normalize normalWS vector but keep the renormFactor to apply it to bitangent and tangent
        float3 unnormalizedNormalWS = normalWS;
        float renormFactor = 1.0 / max(FLT_MIN, length(unnormalizedNormalWS));

        // bitangent on the fly option in xnormal to reduce vertex shader outputs.
        // this is the mikktspace transformation (must use unnormalized attributes)
        float3x3 tangentToWorld = CreateTangentToWorld(unnormalizedNormalWS, tangentWS.xyz, tangentWS.w > 0.0 ? 1.0 : -1.0);

        // surface gradient based formulation requires a unit length initial normal. We can maintain compliance with mikkts
        // by uniformly scaling all 3 vectors since normalization of the perturbed normal will cancel it.
        tangentToWorld[0] = tangentToWorld[0] * renormFactor;
        tangentToWorld[1] = tangentToWorld[1] * renormFactor;
        tangentToWorld[2] = tangentToWorld[2] * renormFactor;		// normalizes the interpolated vertex normal

        return tangentToWorld;
    }

{% endstandard %}

{% standard or universal %}
    // Return absolute world position of current object
    float3 GetObjectAbsolutePositionWS()
    {
        float4x4 modelMatrix = UNITY_MATRIX_M;
        return GetAbsolutePositionWS(modelMatrix._m03_m13_m23); // Translation object to world
    }

    float3 GetPrimaryCameraPosition()
    {
    #if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
        return float3(0, 0, 0);
    #else
        return _WorldSpaceCameraPos;
    #endif
    }

    // Unity 2020.2 already includes these methods.
    {% if unity.version.major < 2020 or unity.version.string == "2020.1" or render_pipeline.name == "Standard" %}
        // Could be e.g. the position of a primary camera or a shadow-casting light.
        float3 GetCurrentViewPosition()
        {
        #if (defined(SHADERPASS) && (SHADERPASS != SHADERPASS_SHADOWS))
            return GetPrimaryCameraPosition();
        #else
            // This is a generic solution.
            // However, using '_WorldSpaceCameraPos' is better for cache locality,
            // and in case we enable camera-relative rendering, we can statically set the position is 0.
            return UNITY_MATRIX_I_V._14_24_34;
        #endif
        }

        // Returns the forward (central) direction of the current view in the world space.
        float3 GetViewForwardDir()
        {
            float4x4 viewMat = GetWorldToViewMatrix();
            return -viewMat[2].xyz;
        }

        // Returns the forward (up) direction of the current view in the world space.
        float3 GetViewUpDir()
        {
            float4x4 viewMat = GetWorldToViewMatrix();
            return viewMat[1].xyz;
        }

        // Returns 'true' if the current view performs a perspective projection.
        bool IsPerspectiveProjection()
        {
        #if defined(SHADERPASS) && (SHADERPASS != SHADERPASS_SHADOWS)
            return (unity_OrthoParams.w == 0);
        #else
            // This is a generic solution.
            // However, using 'unity_OrthoParams' is better for cache locality.
            // TODO: set 'unity_OrthoParams' during the shadow pass.
            return UNITY_MATRIX_P[3][3] == 0;
        #endif
        }

        // Computes the world space view direction (pointing towards the viewer).
        float3 GetWorldSpaceViewDir(float3 positionRWS)
        {
            if (IsPerspectiveProjection())
            {
                // Perspective
                return GetCurrentViewPosition() - positionRWS;
            }
            else
            {
                // Orthographic
                return -GetViewForwardDir();
            }
        }

        float3 GetWorldSpaceNormalizeViewDir(float3 positionRWS)
        {
            return normalize(GetWorldSpaceViewDir(positionRWS));
        }

        // UNITY_MATRIX_V defines a right-handed view space with the Z axis pointing towards the viewer.
        // This function reverses the direction of the Z axis (so that it points forward),
        // making the view space coordinate system left-handed.
        void GetLeftHandedViewSpaceMatrices(out float4x4 viewMatrix, out float4x4 projMatrix)
        {
            viewMatrix = UNITY_MATRIX_V;
            viewMatrix._31_32_33_34 = -viewMatrix._31_32_33_34;

            projMatrix = UNITY_MATRIX_P;
            projMatrix._13_23_33_43 = -projMatrix._13_23_33_43;
        }
    {% endif %}
{% endstandard %}